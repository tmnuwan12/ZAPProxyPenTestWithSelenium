package com.dev.zap;

import org.apache.commons.io.IOUtils;
import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.zaproxy.clientapi.core.ApiResponse;
import org.zaproxy.clientapi.core.ApiResponseElement;
import org.zaproxy.clientapi.core.ClientApi;
import org.zaproxy.clientapi.core.ClientApiException;

import lombok.extern.slf4j.Slf4j;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

/**
 * @author NUW81SGP
 *
 */
@Slf4j
public abstract class OwaspRunner {
	private static final String ZAP_HOST = "localhost";
	private static final String ZAP_ADDRESS = "localhost";

	protected WebDriver driver;

	private ClientApi zapApi;

	private static String webDriverExtractLocation = System.getProperty("java.io.tmpdir") + "\\chromedriver.exe";

	private static final String DRIVER_CLASSPATH_LOCATION = "webdriver/chromedriver.exe";
	
	//private static ChromeDriverService service;

	public void execute() {

		try {
			prepare();
			authenticate();
			doSeleniumNavigation();
			zapStart();

		} catch (Exception e) {
			log.error("error occured", e);
		} finally {
			try {
				teardown();
			} catch (IOException e) {
				log.error("error tearing down", e);
			}
		}
	}

	private final void prepare() throws ClientApiException, IOException {

		log.info("kick starting a browser session...");

		URL url = this.getClass().getClassLoader().getResource("webdriver/chromedriver.exe");

		loadDriverIntoTmp(webDriverExtractLocation);

		if (url == null) {

		}

		log.info("chrome driver location {}", webDriverExtractLocation);

		/*service = new ChromeDriverService.Builder().usingDriverExecutable(new File(webDriverExtractLocation)).usingAnyFreePort()
				.build();
		service.start();*/

		// setup chromedriver
		/*
		 * URL url = this.getClass().getClassLoader().getResource(
		 * "webdriver/chromedriver.exe"); log.info("chrome driver location {}",
		 * url.getFile());
		 */
		 System.setProperty("webdriver.chrome.driver", webDriverExtractLocation);

		// Create a new instance of the Chrome driver
		// Notice that the remainder of the code relies on the interface,
		// not the implementation.
		Proxy proxy = new Proxy(); // org.openqa.selenium.Proxy
		proxy.setHttpProxy(ZAP_HOST + ":" + getZapPort());
		DesiredCapabilities capabilities = DesiredCapabilities.chrome();
		capabilities.setCapability("proxy", proxy);

		driver = new ChromeDriver(capabilities);
		// maximize window
		driver.manage().window().maximize();

		log.info("initializing zap proxy api...");
		zapApi = new ClientApi(ZAP_HOST, getZapPort(), getZapApiKey());
		
		
		log.info("removing existing context node {}", getContext());
		try {
			zapApi.core.deleteSiteNode(getContext(), null, null);
		} catch (ClientApiException e) {
			log.warn("error trying to remove existing node, this may occur of node not ccurrenly exists, error msg {}", e.getMessage());
		}
		// And now use this to visit myBlog
		// Alternatively the same thing can be done like this
		// driver.navigate().to(testUrl);
		// driver.get(testUrl);
	}

	private void loadDriverIntoTmp(String path) throws IOException {

		// TODO:[NUWAN] improve

		File file = new File(path);

		if (file.exists()) {
			file.delete();
		}

		InputStream in = null;

		FileOutputStream out = null;

		in = this.getClass().getClassLoader().getResourceAsStream(DRIVER_CLASSPATH_LOCATION);

		out = new FileOutputStream(path);
		
		log.info("copying driver to {}", path);
		try{
			int bytesCopied = IOUtils.copy(in, out);
			log.info("byte copied {}", bytesCopied);
		}finally{
			
			if(in != null){
				in.close();
			}
			
			if(out != null){
				out.close();
			}
		}

	}

	public void authenticate() throws Exception {
		login();
		log.info("giving some time to load page after login...");
		Thread.sleep(10000);
	}

	protected final void teardown() throws IOException {
		driver.quit();
	}

	private final void zapStart() {

		try {
			// Start spidering the target
			log.info("Spider : " + getContext());
			// It's not necessary to pass the ZAP API key again, already set
			// when creating the
			// ClientApi.
			String regx1 = "^.*/node_modules/.*"; // TODO: [NUWAN] This regx is
													// not working in zap fix
													// this.
			zapApi.spider.excludeFromScan(regx1);

			ApiResponse resp = zapApi.spider.scan(getContext(), null, null, null, null);
			String scanid;
			int progress;

			// The scan now returns a scan id to support concurrent scanning
			scanid = ((ApiResponseElement) resp).getValue();

			// Poll the status until it completes
			while (true) {
				Thread.sleep(1000);
				progress = Integer.parseInt(((ApiResponseElement) zapApi.spider.status(scanid)).getValue());
				log.info("exclusions : " + zapApi.spider.excludedFromScan().getName());
				log.info("Spider progress : " + progress + "%");
				if (progress >= 100) {
					break;
				}
			}
			log.info("Spider complete");

			// Give the passive scanner a chance to complete
			Thread.sleep(2000);

			log.info("Active scan : " + getContext());
			resp = zapApi.ascan.scan(getContext(), "True", "False", null, null, null);

			// The scan now returns a scan id to support concurrent scanning
			scanid = ((ApiResponseElement) resp).getValue();

			// Poll the status until it completes
			while (true) {
				Thread.sleep(5000);
				progress = Integer.parseInt(((ApiResponseElement) zapApi.ascan.status(scanid)).getValue());
				log.info("Active Scan progress : " + progress + "%");
				if (progress >= 100) {
					break;
				}
			}
			log.info("Active Scan complete");

			log.info("Alerts:");
			log.info(new String(zapApi.core.xmlreport()));
			writeToFile(zapApi.core.htmlreport(), "zap.html");

		} catch (Exception e) {
			log.error("Exception from ZAP: ", e);
		}
	}

	public void writeToFile(byte[] content, String fileName) {

		// TODO:[NUWAN] Do validation

		FileOutputStream out = null;

		try {

			File output = new File(getReportPath() + fileName);
			log.info("writing html report file to {}", getReportPath() + fileName);
			if (output.exists()) {

				output.delete();
			} else {
				output.createNewFile();
			}

			out = new FileOutputStream(output);

			out.write(content);
		} catch (Exception e) {
			if (out != null) {
				try {
					out.close();
				} catch (IOException e1) {
					log.error("error closing file stream", e1);
				}

			}
			log.error("error writing zap results", e);
		}

	}

	abstract int getZapPort();

	abstract String getZapApiKey();

	abstract String getContext(); // TODO: [NUWAN] Need to support multiple
									// targets

	abstract String getUsername();

	abstract String getPassword();

	abstract int getWaitTimeForLoginPage();

	abstract String getReportPath();

	abstract void login() throws Exception;

	abstract void doSeleniumNavigation() throws Exception;

}
