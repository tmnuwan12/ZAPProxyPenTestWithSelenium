package com.dev.zap;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.zaproxy.clientapi.core.ClientApi;

import com.google.common.base.Function;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class SuitePortalRunner extends OwaspRunner {

	String ZAP_HOST = "localhost";

	int ZAP_PORT = 8050;

	private static final String ZAP_ADDRESS = "localhost";
	private static final String ZAP_API_KEY = "7vg4cj3uhupdao384ne7fcl8eh"; // Change
																			// this
																			// if
																			// you
																			// have
																			// set
																			// the
																			// apikey
																			// in
																			// ZAP
																			// via
																			// Options
																			// /
																			// API

	//private static final String TARGET = "https://accounts-dev.bosch-iot-suite.com";	
	//for testing less data
	private static final String TARGET = "https://accounts-dev.bosch-iot-suite.com/account/account-success";
	
	private static final String SITE_NODE = "https://accounts-dev.bosch-iot-suite.com";
	
	private String USER_NAME = System.getenv("SUITE_USER");
	private String PW = System.getenv("SUITE_PASS");
	private int WAIT_FOR_LOGIN_PAGE = 40000;
	
	
	private String REPORT_PATH = "C:\\Users\\NUW81SGP\\DEV-CODE\\ZAPProxyPenTestWithSelenium\\selenium-example-master\\target\\";
	
	
	@Override
	String getZapApiKey() {
		// TODO Auto-generated method stub
		return ZAP_API_KEY;
	}

	@Override
	String getTarget() {
		// TODO Auto-generated method stub
		return TARGET;
	}

	@Override
	String getSiteNode() {
		// TODO Auto-generated method stub
		return SITE_NODE;
	}

	@Override
	String getUsername() {
		// TODO Auto-generated method stub
		return USER_NAME;
	}

	@Override
	String getPassword() {
		// TODO Auto-generated method stub
		return PW;
	}

	@Override
	int getWaitTimeForLoginPage() {
		// TODO Auto-generated method stub
		return WAIT_FOR_LOGIN_PAGE;
	}

	@Override
	String getReportPath() {
		// TODO Auto-generated method stub
		return REPORT_PATH;
	}

	@Override
	void login() throws InterruptedException {
		
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver).withTimeout(40, TimeUnit.SECONDS)
				.pollingEvery(35, TimeUnit.SECONDS).ignoring(NoSuchElementException.class);
		driver.get(SITE_NODE);
		WebElement email = wait.until(new Function<WebDriver, WebElement>() {
			public WebElement apply(WebDriver driver) {
				return driver.findElement(By.cssSelector("input[type='email']"));
			}
		});
		
		
		WebElement submitButton = wait.until(new Function<WebDriver, WebElement>() {
			public WebElement apply(WebDriver driver) {
				return driver.findElement(By.cssSelector("button[type='submit']"));
			}
		});
		
		
		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[type='submit']")));// instead of id u can use cssSelector or xpath of ur element
		
		//give time for login screen to load
		Thread.sleep(WAIT_FOR_LOGIN_PAGE); //TODO: Stop Selenium execute following code - even Code find the dom element page is not fully ready to submit. So doing a hardstop here.
		log.info("found login screen...");

		email.clear();
		
		log.info("entering username...");
		email.sendKeys(USER_NAME);
		
		//at this point password element must be in the page...
		
		driver.findElement(By.id("password-field")).clear();
		
		log.info("entering password....");
		driver.findElement(By.id("password-field")).sendKeys(PW);
			
		driver.findElement(By.cssSelector("button[type='submit']")).click();
		
	}

	@Override
	void doSeleniumNavigation() {
		
	}

	@Override
	int getZapPort() {
		// TODO Auto-generated method stub
		return ZAP_PORT;
	}

}
